#if 1

#include <stdio.h>
#include <string.h>
#include <conio.h>

typedef struct _score 
{
	int id;
	int jumsu;
	char name[10];
}SCORE;

#define MAX_ST		20

SCORE exam[MAX_ST];

// 이제부터 설계되는 모든 함수는 이 부분에 선언을 추가한다


int Print_All_Data(void);
int Print_Data(int no);
int Count_Data(void);
int Create_Data(SCORE * p);
int Insert_Data(SCORE * p);
int Delete_Data(int id);
int Search_Complete_Data(SCORE * p);
int Search_Data(int n, SCORE * p, int (*comp)(SCORE * x, SCORE* y));
int Compare_Id(SCORE * x, SCORE* y);
int Compare_Name(SCORE * x, SCORE* y);
int Compare_Jumsu(SCORE * x, SCORE* y);
int Sort_Bubble(SCORE * d, int order, int (*comp)(SCORE * x, SCORE * y));
int Sort_Select(SCORE * d, int order, int (*comp)(SCORE * x, SCORE * y));
int Sort_Insertion(SCORE * d, int order, int (*comp)(SCORE * x, SCORE * y));
int Insert_and_Sort_Data(SCORE * p);
int Copy_Data(int n, SCORE * p);
int Copy_All_Data(SCORE * p, int max);
int Print_All_Buffer(SCORE * d, int max);
int Sort_Quick(SCORE *d, int order, int m, int n, int (*comp)(SCORE * x, SCORE * y));

SCORE test[10] = {{10, 50, "kim"}, {2, 80, "lew"}, {8, 50, "lew"}, {4, 45, "lee"}, {1, 90, "song"},
                               {3, 45, "kim"}, {5, 50, "song"}, {9, 100, "lee"}, {7, 75, "moon"}, {6, 90, "park"}}; 

void Make_Test_Data(int n)
{
	int i;

	for(i=0; i<n; i++)
	{
		exam[i] = test[i];
	}
}

#endif

/***********************************************************/
// [1-1.2] 배열의 모든 자료 인쇄
/***********************************************************/

#if 1

int Print_All_Data(void)


{
	int i;

	for(i=0;i<MAX_ST;i++)
	{
		if(exam[i].id==0)break;
		printf("[%d] ID=%d, NAME=%s SCORE=%d\n",i,exam[i].id,exam[i].name, exam[i].jumsu);
	}
	
	return i;


}

#endif

/***********************************************************/
// [1-1.3] 특정 요소번호의 데이터만 인쇄
/***********************************************************/

#if 1

int Print_Data(int no)
{

		if(test[no].id==0)  return -1;
		printf("%d &d %s \n",exam[no].id,exam[no].jumsu, exam[no].name);
		return 1;
		


}

#endif

/***********************************************************/
// [1-1.4] 배열에 있는 모든 자료의 수를 계산
/***********************************************************/

#if 1

int Count_Data(void)
{

	int i;

	for(i=0;i<MAX_ST;i++)
	{
		if(exam[i].id==0)break;


	}
	
	return i;
	



}

#endif

/***********************************************************/
// [1-1.5] 배열에 데이터 하나를 생성
/***********************************************************/

#if 1

int Create_Data(SCORE * p)
{
	printf("\n 사번을 입력하시오 ");
	scanf("%d",&p->id);
	fflush(stdin);
	printf("\n 이름을 입력하시오 ");
	scanf("%s",p->name);
	fflush(stdin);
	printf("\n 점수를 입력하시오 ");
	scanf("%d",&p->jumsu);
	fflush(stdin);


	return 1;
}

#endif

#if 0

void main(void)
{
	int i;

	for(i=0; i<3; i++)
	{
		Create_Data(&exam[i]);
		printf("\nCount = %d\n", Count_Data());
		printf("Print Result = %d\n", Print_Data(i));
		printf("Printed Data Count = %d\n", Print_All_Data());
	}
}

#endif

/***********************************************************/
// [1-1.6] 데이터 하나를 생성하여 배열에 추가로 저장하는 함수
/***********************************************************/

#if 1

int Insert_Data(SCORE * p)
{
	int i;
	for(i=0;i<MAX_ST;i++)
	{
		if(exam[i].id==0)
		{
			exam[i] =(*p);
			return i;
		}

		if(exam[i].id==p->id) return -2;


	}





	return -1;



}

#endif

#if 0

void main(void)
{
	SCORE tmp;

	do
	{
		Create_Data(&tmp);
		printf("\n\nInsert Result = %d\n", Insert_Data(&tmp));
		printf("Printed Data Count = %d\n", Print_All_Data());
		printf("\n계속(아무키), 그만(x 키)\n");
	}while(getch() != 'x');
}

#endif

/***********************************************************/
// [1-1.7] 지정한 사번의 데이터 삭제 기능을 수행하는 함수
/***********************************************************/

#if 1

 int Delete_Data(int id)
{



int i;
int j;

if(exam[0].id==0) return -2;


for(i=0;i<MAX_ST;i++)
{
	if(exam[i].id==id)
	{

		for(j=i;j<MAX_ST-1;j++)
		{
			if(exam[j+1].id==0)
			{
				exam[j].id=0;
				return i;
			}

		exam[j]=exam[j+1];	
		}
		exam[j].id=0;
		return i;

		
	}




}
	
return -1;
 }







#endif

#if 0

void main(void)
{
	int i;

	Make_Test_Data(5);
	printf("Printed Data Count = %d\n", Print_All_Data());

	do
	{
		printf("\n삭제할 자료의 사번을 입력하시오 => ");
		scanf("%d", &i);
		fflush(stdin);
		printf("\n\nDelete Element = %d\n", Delete_Data(i));
		printf("Printed Data Count = %d\n", Print_All_Data());
		printf("\n계속(아무키), 그만(x 키)\n");
	}while(getch() != 'x');
}

#endif

/***********************************************************/
// [1-1.8] 모든 멤버가 일치하는 데이터를 탐색하는 함수
/***********************************************************/

#if 1

int Search_Complete_Data(SCORE * p)
{

 int i;
 if(exam[0].id==0)return -2;


 for(i=0;i<MAX_ST;i++)
 {
	 if((exam[i].id==p->id)&&(exam[i].jumsu == p->jumsu))
	 {
		 if(!strcmp(exam[i].name,p->name)) return i;	
	 }
 }


return -1;



}

#endif

#if 0

void main(void)
{
	SCORE tmp;

	Make_Test_Data(8);
	printf("Printed Data Count = %d\n", Print_All_Data());

	do
	{
		printf("\n탐색할 자료를 입력하시오\n");
		Create_Data(&tmp);
		printf("\n\nSearched Element = %d\n", Search_Complete_Data(&tmp));
		printf("Printed Data Count = %d\n", Print_All_Data());
		printf("\n계속(아무키), 그만(x 키)\n");
	}while(getch() != 'x');
}

#endif

/***********************************************************/
// [1-1.9] 원하는 멤버를 갖는 데이터를 탐색하는 함수, 비교를 위한 call back 함수도 설계
/***********************************************************/

#if 1

int Search_Data(int n, SCORE * p, int (*comp)(SCORE * x, SCORE* y) )
{
	int i;
	if(exam[0].id==0) return -2;

	for(i=n;i<MAX_ST;i++)
	{
		if(comp(p,&exam[i])==0)return i;

	}


	return -1;

}

int Compare_Id(SCORE * x, SCORE* y)
{

	if((x->id)==(y->id))return 0;
	if((x->id)>(y->id)) return 1;
	else return -1;


}

int Compare_Name(SCORE * x, SCORE* y)
{
	return strcmp(x->name,y->name);



}

int Compare_Jumsu(SCORE * x, SCORE* y)
{

 if((x->jumsu)==(y->jumsu))return 0;
 if((x->jumsu)>(y->jumsu)) return 1;
		return -1;


}

#endif

#if 1

void main(void)
{
	int n;
	SCORE tmp;

	Make_Test_Data(8);
	printf("Printed Data Count = %d\n", Print_All_Data());

	do
	{
		printf("\n탐색할 자료를 입력하시오\n");
		Create_Data(&tmp);

		printf("\nSearched Element (ID) = %d\n", n=Search_Data(0, &tmp, Compare_Id));
		Print_Data(n);

		n = 0;
		printf("Printed Data Count = %d\n", Print_All_Data());

		do
		{
			printf("\nSearched Element (Name) = %d\n", n=Search_Data(n, &tmp, Compare_Name));
			Print_Data(n);
			n++;
		}while(n > 0);

		n = 0;
		printf("Printed Data Count = %d\n", Print_All_Data());

		do
		{
			printf("\nSearched Element (Jumsu) = %d\n", n=Search_Data(n, &tmp, Compare_Jumsu));
			Print_Data(n);
			n++;
		}while(n > 0);

		printf("\n계속(아무키), 그만(x 키)\n");
	}while(getch() != 'x');
}

#endif