#if 1

#include <stdio.h>
#include <string.h>
#include <conio.h>
#include <malloc.h>

typedef struct _score 
{
	int id;
	int jumsu;
	char name[10];
	struct _score  * left; 
	struct _score  * right; 
	struct _score  * parent;
}SCORE;

SCORE * Root = (SCORE *)0x0;

#define MAX_ST		20

// 이제부터 설계되는 모든 함수는 이 부분에 선언을 추가한다

void Print_All_Node(SCORE * p);
void Delete_All_Node(SCORE * p);
int Insert_Node(SCORE * head, SCORE * d);
SCORE * Search_Node(SCORE * head, int id);
int Delete_Node(SCORE * head, int id);
SCORE * Creat_Node(SCORE * d);
int Create_Data(SCORE * p);

SCORE test[MAX_ST] = {{10, 50, "kim"}, {2, 80, "lew"}, {8, 50, "lew"}, {4, 45, "lee"}, {1, 90, "song"},\
                               {3, 45, "kim"}, {5, 50, "song"}, {9, 100, "lee"}, {7, 75, "moon"}, {6, 90, "park"}, \
                               {15, 90, "ki"}, {11, 20, "kong"}, {14, 40, "shin"}, {12, 50, "son"}, {17, 48, "lee"}, \
                               {20, 100, "min"}, {19, 80, "you"}, {13, 45, "song"}, {16, 54, "no"}, {18, 100, "yang"}}; 

int Create_Data(SCORE * p)
{
	printf("\n사번을 입력하시오 => ");
	scanf("%d", &p->id);
	fflush(stdin);
	printf("이름을 입력하시오 => ");
	scanf("%s", p->name);
	fflush(stdin);
	printf("점수를 입력하시오 => ");
	scanf("%d", &p->jumsu);
	fflush(stdin);
	p->left = (SCORE *)0x0;
	p->right = (SCORE *)0x0;

	return 1;
}

void Print_All_Node(SCORE * p)
{
	if(p == (SCORE *)0) 
	{
		printf("No Data\n"); 
		return;
	}

	if(p->left) Print_All_Node(p->left);
	printf("addr=0x%.8X, ID=%d, NAME=%s, SCORE=%d, left=0x%.8X, right=0x%.8X\n", p, p->id, p->name, p->jumsu, p->left, p->right);
	if(p->right) Print_All_Node(p->right);
}

#endif

/***********************************************************/
// [3-1.3] 데이터 하나를 생성하여 Linked List에 추가하는 함수 (calloc 사용)
/***********************************************************/

#if 1

SCORE * Creat_Node(SCORE * d)
{
	SCORE * p;

	p = calloc(1, sizeof(SCORE));
	if(p == (void *)0x0) return p;
	*p = *d;
	p->left = (SCORE *)0x0;
	p->right = (SCORE *)0x0;

	return p;
}

int Insert_Node(SCORE * head, SCORE * d)
{
	SCORE *p;
	p=Creat_Node(d);

	if(!p)return -1;
	if(head==NULL)
	{
		Root =p;
		return 1;

	}
	for(;;)
	{
		if(head->id==d->id)
		{
			free(p);
			return -2;

		}
		// 왼쪽
		if(head->id > d->id)
		{
			if(head->left)head=head->left;
			else
			{
				head->left=p;
				p->parent=head;
				return 1;
				
			}


		}
		// 오른쪽
		else
		{
			if(head->right) head=head->right; 
			else
			{	
				head->right=p;
				p->parent=head;
				return 1;

			}



		}



	}




}

#endif

#if 1

void main(void)
{
	int i;
	int r;

	for(i=0; i<MAX_ST; i++)
	{
		printf("[Loop: %d] Insert Node Result=%d, ID=%d\n", i, r = Insert_Node(Root, &test[i]), test[i].id);
		Print_All_Node(Root);
	}
}

#endif
